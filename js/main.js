!function e(a,i,s){function l(t,d){if(!i[t]){if(!a[t]){var r="function"==typeof require&&require;if(!d&&r)return r(t,!0);if(n)return n(t,!0);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}var o=i[t]={exports:{}};a[t][0].call(o.exports,function(e){var i=a[t][1][e];return l(i?i:e)},o,o.exports,e,a,i,s)}return i[t].exports}for(var n="function"==typeof require&&require,t=0;t<s.length;t++)l(s[t]);return l}({1:[function(e,a,i){"use strict";var s=e("./weeks");$(window).ready(function(){$("#handle-size-select").on("change",function(){(0,s.setHandleSize)(this.value)}),$("#calculate-all").on("click",function(){(0,s.calculateAllHandles)()});var e=!1,a=void 0;$(".on-btn").click(function(){if("none"==(a=document.getElementById("box").style.display)){if(document.getElementById("box").style.display="block",!e){e=!0,$(".flexslider").flexslider({animation:"slide",slideshow:!1,controlNav:!1,controlsContainer:$(".custom-controls-container"),customDirectionNav:$(".custom-navigation a"),keyboard:!1,animationLoop:!0,after:function(e){e.currentSlide==e.last&&(0,s.addLastWeekSlide)($(".flexslider")),(0,s.setWeekText)(e.currentSlide),0==e.currentSlide?($(".flex-prev").hide(),$(".flex-prev-block").show()):($(".flex-prev").show(),$(".flex-prev-block").hide())}});var i=moment().isoWeekday(),l=void 0;switch(i){case 1:l=".monday";break;case 2:l=".tuesday";break;case 3:l=".wednesday";break;case 4:l=".thursday";break;case 5:l=".friday";break;case 6:l=".saturday";break;case 7:l=".sunday"}var n=$(".flex-active-slide").find(l),t=$(".flex-active-slide .default-wrap > div"),d=t.splice(0,t.index(n));d.forEach(function(e){$(e).addClass("past-day")}),(0,s.initFirstSlider)(n)}}else"block"==a&&(document.getElementById("box").style.display="none")}),$(".close-button").click(function(){document.getElementById("box").style.display="none"}),$(".switch-on").click(s.daytimeSliderChanges),$(".switch-off").click(s.daytimeSliderChanges),$(".flex-prev").hide(),$(".flex-prev-block").show(),$(".add-button").click(function(){var e=$(".flex-active-slide .default-wrap > div:not(.past-day)"),a=e[0];(0,s.addHandle)(a)});var i=null;$(".del-button").mousedown(function(){i=$(":focus").hasClass("ui-slider-handle")?$(":focus"):null}),$(".del-button").click(function(){i&&(0,s.deleteHandle)(i)})})},{"./weeks":2}],2:[function(e,a,i){"use strict";function s(e){if(Array.isArray(e)){for(var a=0,i=Array(e.length);a<e.length;a++)i[a]=e[a];return i}return Array.from(e)}function l(e){var a=e.getBoundingClientRect();return{top:a.top+window.scrollY,bottom:a.bottom+window.scrollY,left:a.left+window.scrollX,right:a.right+window.scrollX}}function n(e){D=parseInt(e),t(),d()}function t(){var e;switch(D){case 100:e=8;break;case 200:e=16;break;case 300:e=24;break;case 400:e=32;break;default:console.log("incorrect HANDLE_SIZE! Defaulting to 100"),e=8}$(".ui-slider-handle").css("height",e)}function d(){if(A){var e;switch(D){case 100:e=0;break;case 200:e=7;break;case 300:e=14;break;case 400:e=20}$(".default-wrap").css("height",190+e),$(".default-wrap").css("padding-top",70+e)}else{var e;switch(D){case 100:e=0;break;case 200:e=7;break;case 300:e=14;break;case 400:e=20}$(".default-wrap").css("height",190+e),$(".default-wrap").css("padding-top",e)}}function r(e,a){return a&&(e=e.filter(function(e){return e<=14&&e>=4})),e}function c(e){var a=23-(moment().hour()+1);return a<0&&(a=0),e&&(a<4?a=4:a>14&&(a=14)),a}function o(e,a){var i;i=e.hasClass("current-day")?c(A):A?14:23,a=a?r(a,A):[i],e.slider({orientation:"vertical",min:A?4:0,max:A?14:23,values:a,step:1,animate:!0,start:function(e,a){var i=23-a.value;S.text(i),S.show(),S.css("top",l(a.handle).top-10),S.css("left",l(a.handle).left+30)},slide:function(e,a){if($(this).hasClass("current-day")&&!p(a))return!1;var i=l(this);if(!(e.pageX<i.right+10&&e.pageX>i.left-10&&e.pageY<i.bottom+10&&e.pageY>i.top-10))return!1;for(var s=[],n=0;n<a.values.length;n++){if(s.indexOf(a.values[n])>-1)return!1;s.push(a.values[n])}var t=23-a.value;S.text(t),S.css("top",l(a.handle).top-10),S.css("left",l(a.handle).left+30)},stop:function(){S.hide()}}),0==a.length?e.removeClass("active-slider"):e.addClass("active-slider"),m(),t()}function u(e){if(e.addClass("current-day"),c(A)>=23-E){var a=f(e,!0);o($(a))}else o(e)}function f(e,a){var i,s=$(".flex-active-slide .default-wrap > div"),l=s.index(e);if(6!=l)i=s[l+1];else{var n=$(".flex-active-slide")[0],t=n.nextElementSibling;i=$(t).find(".monday"),a&&v()}return i}function v(){$(".flex-next").trigger("click")}function p(e){return e.value<23-E}function m(){$(".ui-slider-handle").off("mousedown"),$(".ui-slider-handle").on("mousedown",function(e){function a(){$(".flex-active-slide .scale-item .default-wrap").off("mouseup")}function i(e){$(s).focus();var a=l(n);e.pageX<a.right+10&&e.pageX>a.left-10&&e.pageY<a.bottom+10&&e.pageY>a.top-10?r.css("display","none"):(r.css("display","initial"),r.css("left",e.pageX-r.width()/2),r.css("top",e.pageY-r.height()/2))}var s=this;$(s).focus();var n=$(this).parent()[0],t=$(n).find(".ui-slider-handle").index(s),d=$(".flex-active-slide .scale-item .default-wrap > div").index($(n)),r=$(this).clone().addClass("handle-clone");r.css("width",$(s).width()).css("height",$(s).height()),i(e),$("body").append(r),function(){$(".flex-active-slide .scale-item .default-wrap").each(function(e,a){e!==d&&$(a).mouseup(function(e){var a=$(e.currentTarget).find("div");h(e,n,a,t)})})}(),$("body").mousemove(function(e){i(e)}),$("body").mouseup(function(e){$("body").off("mousemove"),$("body").off("mouseup"),r.remove(),a()})})}function h(e,a,i,s){if(!i.hasClass("past-day")){if(i.hasClass("current-day")){if(c(A)>=23-E)return}var l=$(a).slider("values");l.splice(s,1);x(i,!0)&&($(a).slider("destroy"),o($(a),l)),S.hide()}}function y(){return $(".flexslider .slides .item:not(.clone)")}function w(e){var a=e.data("flexslider"),i=$('<li class="item">\n                                <div class="item-week">\n                                </div>\n                                <div class="scale-wrapper">\n                                    <ul class="list-scale-wrap">\n                                        <li class="times-wrap-left">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Mon</div>\n                                            <div class="add-times-left">\n                                                <div class="default-wrap">\n                                                    <div class="default-slider monday"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Tue</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  tuesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Wed</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider wednesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Th</div>\n                                            <div></div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider thursday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Fr</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  friday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sat</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  saturday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sun</div>\n                                            <div class="add-times-right">\n                                                <div class="default-wrap">\n                                                    <div class="default-slider  sunday"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="times-wrap-right">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </li>');a.addSlide(i),d()}function g(){A?($(".switch-on").removeClass("active"),$(".switch-off").addClass("active"),$(".default-wrap").addClass("slide-wrap"),$(".default-slider").addClass("slider"),$(".slider").removeClass("default-slider"),$(".slider").slider({min:0,max:23}),A=!1):0==A&&($(".switch-off").removeClass("active"),$(".switch-on").addClass("active"),$(".slide-wrap").addClass("default-wrap"),$(".default-wrap").removeClass("slide-wrap"),$(".slider").addClass("default-slider"),$(".default-slider").removeClass("slider"),A=!0,$(".default-slider.active-slider").each(function(e,a){var i=$(a).slider("values");$(a).slider("destroy"),o($(a),i)})),d()}function x(e,a){var i=$(e),l=[];if(l=A?[4,5,6,7,8,9,10,11,12,13,14]:[].concat(s(new Array(24).keys())),!i.hasClass("active-slider")){var n=c(A);if(i.hasClass("current-day")&&n>=23-E){var t=f(e,!1);if($(".flex-active-slide .default-wrap > div").index(t)==-1)return;x(t),$(t).addClass("active-slider")}else o(i),i.addClass("active-slider");return!0}var d=i.slider("values");i.hasClass("current-day")&&(l=l.filter(function(e){return!(e>=23-E)})),l=l.filter(function(e){return d.indexOf(e)==-1});var r=l[l.length-1];if(void 0!=r)return d.push(r),i.slider("destroy"),o(i,d),i.find(".ui-slider-handle:last").focus(),!0;if(a)return!1;var u=f(e,!1);if($(".flex-active-slide .default-wrap > div").index(u)==-1)return!1;x(u)}function k(e){var a=e.parent(),i=a.find(".ui-slider-handle").index(e),s=a.slider("values");s.splice(i,1),a.slider("destroy"),o(a,s)}function b(e){var a=H.clone(),i=e?a.add(e,"w"):a,s=i.isoWeekday(1).format("DD"),l=i.isoWeekday(7).format("DD"),n=i.format("MM");$(".item-week").html("Week "+s+"-"+l+"."+n)}function C(){var e=[];console.log("calculating moments..."),$(".flexslider .slides .item:not(.clone)").each(function(a,i){var s=H.week()+a;$(i).find(".default-wrap > div").each(function(a,i){var l=1+a;$(i).hasClass("active-slider")&&$(i).slider("values").map(function(e){return 23-e}).forEach(function(a){e.push(moment().year(H.year()).month(H.month()).week(s).day(l).hour(a).minute(0).second(0))})})}),e=e.filter(function(e){var a=H.clone().hour(E+1).minute(0).second(0);return e.unix()>=a.unix()});var a=e.map(function(e){return e.format("LLL")});console.log(a),console.log("object returned -> ",e)}Object.defineProperty(i,"__esModule",{value:!0}),i.setHandleSize=n,i.updateAllHandles=t,i.initSlider=o,i.initFirstSlider=u,i.getItems=y,i.addLastWeekSlide=w,i.daytimeSliderChanges=g,i.addHandle=x,i.deleteHandle=k,i.setWeekText=b,i.calculateAllHandles=C;var S,E,H;$(window).ready(function(){$("body").append('<div id="slider-popup"></div>'),S=$("#slider-popup"),E=moment().hour(),H=moment(),b()});var A=!0,D=100},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
