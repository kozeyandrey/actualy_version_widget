"use strict";$(window).ready(function(){function e(){t?($(".switch-on").removeClass("active"),$(".switch-off").addClass("active"),$(".default-wrap").addClass("slide-wrap"),$(".default-slider").addClass("slider"),$(".slider").removeClass("default-slider"),$(".slider").slider({min:0,max:23}),t=!1):0==t&&($(".switch-off").removeClass("active"),$(".switch-on").addClass("active"),$(".slide-wrap").addClass("default-wrap"),$(".default-wrap").removeClass("slide-wrap"),$(".slider").addClass("default-slider"),$(".default-slider").removeClass("slider"),$(".default-slider").slider({min:4,max:14}),t=!0)}var s=moment().day(),a=void 0;switch(s){case 1:a=$(".monday");break;case 2:a=$(".tuesday");break;case 3:a=$(".wednesday");break;case 4:a=$(".thursday");break;case 5:a=$(".friday");break;case 6:a=$(".saturday");break;case 7:a=$(".sunday")}a.addClass("active-slider");var l=void 0;$(".on-btn").click(function(){l=document.getElementById("box").style.display,"none"==l?(document.getElementById("box").style.display="block",$(".flexslider").flexslider({animation:"slide",slideshow:!1,controlNav:!1,controlsContainer:$(".custom-controls-container"),customDirectionNav:$(".custom-navigation a"),keyboard:!1,animationLoop:!0})):"block"==l&&(document.getElementById("box").style.display="none")}),$(".close-button").click(function(){document.getElementById("box").style.display="none"});var t=!0;$(".switch-on").click(e),$(".switch-off").click(e),$("body").append('<div id="slider-popup">000</div>');var o=$("#slider-popup");console.log(o),$(".default-slider").slider({orientation:"vertical",min:4,max:14,step:1,animate:!0,start:function(e,s){console.log("start");var a=23-s.value;o.text(a);var l=$($(e.target).find(".ui-slider-handle"));o.show(),o.css("top",l.offset().top-20),o.css("left",l.offset().left+30)},slide:function(e,s){var a=23-s.value;o.text(a);var l=$($(e.target).find(".ui-slider-handle"));o.css("top",l.offset().top-20),o.css("left",l.offset().left+30),$(".contentSlider").html(a+" hour")},stop:function(){console.log("stop"),o.hide()}});var d=moment(),i=d.day(1).format("DD"),n=d.day(7).format("DD"),r=d.format("MM");$(".item-week").html("Week "+i+"-"+n+"."+r);var c=moment().week(),f=moment().week();f==c?($(".flex-prev").css("display","none"),$(".flex-prev-block").css("display","block")):($(".flex-prev-block").css("display","none"),$(".flex-prev").css("display","block")),$(".flex-next").click(function(){$(".flex-prev").css("display","block"),$(".flex-prev-block").css("display","none"),f==c?f=c+1:f==m?f=m+1:f+=1;var e=moment().week(f),s=e.day(1).format("DD"),a=e.day(7).format("DD"),l=e.format("MM");$(".item-week").html("Week "+s+"-"+a+"."+l)});var m,p=f;$(".flex-prev").click(function(){if(f==c)return!1;f-=1,p=f,p==c?($(".flex-prev").css("display","none"),$(".flex-prev-block").css("display","block")):($(".flex-prev").css("display","block"),$(".flex-prev-block").css("display","none"));var e=moment().week(f),s=e.day(1).format("DD"),a=e.day(7).format("DD"),l=e.format("MM");$(".item-week").html("Week "+s+"-"+a+"."+l),m=f}),$(".default-wrap").click(function(){$(".wednesday").addClass("twoHandles"),$(this).click(function(){$(".wednesday").slider({values:[13,14,15]})})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
