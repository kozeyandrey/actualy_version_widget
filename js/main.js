!function e(l,i,s){function n(d,t){if(!i[d]){if(!l[d]){var r="function"==typeof require&&require;if(!t&&r)return r(d,!0);if(a)return a(d,!0);var o=new Error("Cannot find module '"+d+"'");throw o.code="MODULE_NOT_FOUND",o}var c=i[d]={exports:{}};l[d][0].call(c.exports,function(e){var i=l[d][1][e];return n(i?i:e)},c,c.exports,e,l,i,s)}return i[d].exports}for(var a="function"==typeof require&&require,d=0;d<s.length;d++)n(s[d]);return n}({1:[function(e,l,i){"use strict";var s=e("./weeks");$(window).ready(function(){function e(e){var l=e?moment().week(e):moment(),i=l.isoWeekday(1).format("DD"),s=l.isoWeekday(7).format("DD"),n=l.format("MM");$(".item-week").html("Week "+i+"-"+s+"."+n)}var l=void 0;$(".on-btn").click(function(){if("none"==(l=document.getElementById("box").style.display)){document.getElementById("box").style.display="block",$(".flexslider").flexslider({animation:"slide",slideshow:!1,controlNav:!1,controlsContainer:$(".custom-controls-container"),customDirectionNav:$(".custom-navigation a"),keyboard:!1,animationLoop:!0,after:function(e){e.currentSlide==e.last&&((0,s.addLastWeekSlide)($(".flexslider")),console.log("last transition ended"))}});var e=moment().isoWeekday(),i=void 0;switch(e){case 1:i=".monday";break;case 2:i=".tuesday";break;case 3:i=".wednesday";break;case 4:i=".thursday";break;case 5:i=".friday";break;case 6:i=".saturday";break;case 7:i=".sunday"}(0,s.initSlider)($(".flex-active-slide").find(i))}else"block"==l&&(document.getElementById("box").style.display="none")}),$(".close-button").click(function(){document.getElementById("box").style.display="none"}),$(".switch-on").click(s.daytimeSliderChanges),$(".switch-off").click(s.daytimeSliderChanges);var i=moment().week(),n=moment().week();e(n),n==i?($(".flex-prev").hide(),$(".flex-prev-block").show()):($(".flex-prev-block").hide(),$(".flex-prev").show()),$(".flex-next").click(function(){$(".flex-prev").show(),$(".flex-prev-block").hide(),n==i?n=i+1:n==a?n=a+1:n+=1,e(n)});var a,d=n;$(".flex-prev").click(function(){if(n==i)return!1;n-=1,d=n,d==i?($(".flex-prev").hide(),$(".flex-prev-block").show()):($(".flex-prev").show(),$(".flex-prev-block").hide()),e(n),a=n}),$(".add-button").click(function(){(0,s.addHandle)()});var t=null;$(".del-button").mousedown(function(){console.log("delete"),console.log($(":focus")),t=$(":focus").hasClass("ui-slider-handle")?$(":focus"):null}),$(".del-button").click(function(){t&&(0,s.deleteHandle)(t)})})},{"./weeks":2}],2:[function(e,l,i){"use strict";function s(e){if(Array.isArray(e)){for(var l=0,i=Array(e.length);l<e.length;l++)i[l]=e[l];return i}return Array.from(e)}function n(e,l){return l&&(console.log("filtering...",e),e=e.filter(function(e){return e<=14&&e>=4})),console.log(e),e}function a(e){var l=23-(moment().hour()+1);return e&&(l<4?l=4:l>14&&(l=14)),l}function d(e,l){l=l?n(l,f):[a(f)],e.slider({orientation:"vertical",min:f?4:0,max:f?14:23,values:l,step:1,animate:!0,start:function(e,l){var i=23-l.value;u.text(i),u.show(),u.css("top",l.handle.getBoundingClientRect().top-10),u.css("left",l.handle.getBoundingClientRect().left+30)},slide:function(e,l){var i=[];console.log(l.values);for(var s=0;s<l.values.length;s++){if(i.indexOf(l.values[s])>-1)return!1;i.push(l.values[s])}var n=23-l.value;u.text(n),u.css("top",l.handle.getBoundingClientRect().top-10),u.css("left",l.handle.getBoundingClientRect().left+30),$(".contentSlider").html(n+" hour")},stop:function(){u.hide()}}),console.log("VALUES",l),0==l.length?e.removeClass("active-slider"):e.addClass("active-slider")}function t(){return $(".flexslider .slides .item:not(.clone)")}function r(e){var l=e.data("flexslider"),i=$('<li class="item">\n                                new\n                                <div class="item-week">\n                                </div>\n                                <div class="scale-wrapper">\n                                    <ul class="list-scale-wrap">\n                                        <li class="times-wrap-left">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Mon</div>\n                                            <div class="add-times-left">\n                                                <div class="default-wrap">\n                                                    <div class="monday default-slider slide-active"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Tue</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  tuesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Wed</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider wednesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Th</div>\n                                            <div></div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider thursday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Fr</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  friday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sat</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  saturday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sun</div>\n                                            <div class="add-times-right">\n                                                <div class="default-wrap">\n                                                    <div class="default-slider  sunday"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="times-wrap-right">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </li>');l.addSlide(i)}function o(){f?($(".switch-on").removeClass("active"),$(".switch-off").addClass("active"),$(".default-wrap").addClass("slide-wrap"),$(".default-slider").addClass("slider"),$(".slider").removeClass("default-slider"),$(".slider").slider({min:0,max:23}),f=!1):0==f&&($(".switch-off").removeClass("active"),$(".switch-on").addClass("active"),$(".slide-wrap").addClass("default-wrap"),$(".default-wrap").removeClass("slide-wrap"),$(".slider").addClass("default-slider"),$(".default-slider").removeClass("slider"),f=!0,$(".default-slider.active-slider").each(function(e,l){var i=$(l).slider("values");$(l).slider("destroy"),d($(l),i)})),console.log($(".flex-active-slide .active-slider").slider("values"))}function c(){var e=$(".flex-active-slide"),l=e.find(".monday"),i=[];if(i=f?[4,5,6,7,8,9,10,11,12,13,14]:[].concat(s(new Array(24).keys())),l.hasClass("active-slider")){var n=l.slider("value"),a=l.slider("values");console.log(n,a);var t=a[a.length-1]-1;if(a.indexOf(t)===-1&&i.indexOf(t)!==-1)a.push(a[a.length-1]-1);else{i=i.filter(function(e){return a.indexOf(e)==-1});var r=i.randomElement();void 0!=r&&a.push(r),console.log(a)}l.slider("destroy"),d(l,a)}else d(l),l.addClass("active-slider");console.log(l.find(".ui-slider-handle:last")),l.find(".ui-slider-handle:last").focus()}function v(e){console.log(e);var l=e.parent(),i=l.find(".ui-slider-handle").index(e),s=l.slider("values");console.log("old values",s),console.log(i),s.splice(i,1),console.log("new values",s),l.slider("destroy"),d(l,s)}Object.defineProperty(i,"__esModule",{value:!0}),i.initSlider=d,i.getItems=t,i.addLastWeekSlide=r,i.daytimeSliderChanges=o,i.addHandle=c,i.deleteHandle=v,Array.prototype.randomElement=function(){return this[Math.floor(Math.random()*this.length)]};var u;$(window).ready(function(){$("body").append('<div id="slider-popup"></div>'),u=$("#slider-popup")});var f=!0},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
