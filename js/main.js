!function e(i,s,l){function n(d,t){if(!s[d]){if(!i[d]){var o="function"==typeof require&&require;if(!t&&o)return o(d,!0);if(a)return a(d,!0);var r=new Error("Cannot find module '"+d+"'");throw r.code="MODULE_NOT_FOUND",r}var c=s[d]={exports:{}};i[d][0].call(c.exports,function(e){var s=i[d][1][e];return n(s?s:e)},c,c.exports,e,i,s,l)}return s[d].exports}for(var a="function"==typeof require&&require,d=0;d<l.length;d++)n(l[d]);return n}({1:[function(e,i,s){"use strict";var l=e("./weeks");$(window).ready(function(){function e(e){var i=e?moment().week(e):moment(),s=i.isoWeekday(1).format("DD"),l=i.isoWeekday(7).format("DD"),n=i.format("MM");$(".item-week").html("Week "+s+"-"+l+"."+n)}var i=void 0;$(".on-btn").click(function(){if("none"==(i=document.getElementById("box").style.display)){document.getElementById("box").style.display="block",$(".flexslider").flexslider({animation:"slide",slideshow:!1,controlNav:!1,controlsContainer:$(".custom-controls-container"),customDirectionNav:$(".custom-navigation a"),keyboard:!1,animationLoop:!0,after:function(e){e.currentSlide==e.last&&((0,l.addLastWeekSlide)($(".flexslider")),console.log("last transition ended"))}});var e=moment().isoWeekday(),s=void 0;switch(e){case 1:s=".monday";break;case 2:s=".tuesday";break;case 3:s=".wednesday";break;case 4:s=".thursday";break;case 5:s=".friday";break;case 6:s=".saturday";break;case 7:s=".sunday"}(0,l.initSlider)($(".flex-active-slide").find(s))}else"block"==i&&(document.getElementById("box").style.display="none")}),$(".close-button").click(function(){document.getElementById("box").style.display="none"}),$(".switch-on").click(l.daytimeSliderChanges),$(".switch-off").click(l.daytimeSliderChanges);var s=moment().week(),n=moment().week();e(n),n==s?($(".flex-prev").hide(),$(".flex-prev-block").show()):($(".flex-prev-block").hide(),$(".flex-prev").show()),$(".flex-next").click(function(){$(".flex-prev").show(),$(".flex-prev-block").hide(),n==s?n=s+1:n==a?n=a+1:n+=1,e(n)});var a,d=n;$(".flex-prev").click(function(){if(n==s)return!1;n-=1,d=n,d==s?($(".flex-prev").hide(),$(".flex-prev-block").show()):($(".flex-prev").show(),$(".flex-prev-block").hide()),e(n),a=n}),$(".add-button").click(function(){var e=$(".flex-active-slide").find(".monday");(0,l.addHandle)(e)});var t=null;$(".del-button").mousedown(function(){console.log("delete"),console.log($(":focus")),t=$(":focus").hasClass("ui-slider-handle")?$(":focus"):null}),$(".del-button").click(function(){t&&(0,l.deleteHandle)(t)})})},{"./weeks":2}],2:[function(e,i,s){"use strict";function l(e){if(Array.isArray(e)){for(var i=0,s=Array(e.length);i<e.length;i++)s[i]=e[i];return s}return Array.from(e)}function n(e){var i=e.getBoundingClientRect();return{top:i.top+window.scrollY,bottom:i.bottom+window.scrollY,left:i.left+window.scrollX,right:i.right+window.scrollX}}function a(e,i){return i&&(e=e.filter(function(e){return e<=14&&e>=4})),e}function d(e){var i=23-(moment().hour()+1);return i<0&&(i=0),e&&(i<4?i=4:i>14&&(i=14)),console.log("default",i),i}function t(e,i){i=i?a(i,h):[d(h)],e.slider({orientation:"vertical",min:h?4:0,max:h?14:23,values:i,step:1,animate:!0,start:function(e,i){var s=23-i.value;p.text(s),p.show(),p.css("top",n(i.handle).top-10),p.css("left",n(i.handle).left+30)},slide:function(e,i){var s=n(this);if(!(e.pageX<s.right+10&&e.pageX>s.left-10&&e.pageY<s.bottom+10&&e.pageY>s.top-10))return!1;for(var l=[],a=0;a<i.values.length;a++){if(l.indexOf(i.values[a])>-1)return!1;l.push(i.values[a])}var d=23-i.value;p.text(d),p.css("top",n(i.handle).top-10),p.css("left",n(i.handle).left+30),$(".contentSlider").html(d+" hour")},stop:function(){p.hide()}}),0==i.length?e.removeClass("active-slider"):e.addClass("active-slider"),o()}function o(){$(".ui-slider-handle").off("mousedown"),$(".ui-slider-handle").on("mousedown",function(e){function i(){$(".flex-active-slide .scale-item .default-wrap").off("mouseup")}function s(e){$(l).focus();var i=n(a);e.pageX<i.right+10&&e.pageX>i.left-10&&e.pageY<i.bottom+10&&e.pageY>i.top-10?o.css("display","none"):(o.css("display","initial"),o.css("left",e.pageX-o.width()/2),o.css("top",e.pageY-o.height()/2))}var l=this;$(l).focus(),console.log(l);var a=$(this).parent()[0],d=$(a).find(".ui-slider-handle").index(l),t=$(".flex-active-slide .scale-item .default-wrap > div").index($(a)),o=$(this).clone();o.css("position","absolute"),o.css("width","25px").css("height","9px").css("left","0").css("top",0).css("opacity",.5),o.css("pointer-events","none"),$("body").append(o),console.log("sliderIndex",t),function(){$(".flex-active-slide .scale-item .default-wrap").each(function(e,i){e!==t&&$(i).mouseup(function(e){r(e,l,a,d,t)})})}(),o.mouseup(function(){console.log("clone mouseup",e)}),$("body").mousemove(function(e){s(e)}),$("body").mouseup(function(e){$("body").off("mousemove"),$("body").off("mouseup"),o.remove(),i()})})}function r(e,i,s,l,n){console.log(e);var a=$(s).slider("values"),d=$(e.currentTarget).find("div");a.splice(l,1),$(s).slider("destroy"),t($(s),a),p.hide(),console.log("newslider",d),v(d)}function c(){return $(".flexslider .slides .item:not(.clone)")}function u(e){var i=e.data("flexslider"),s=$('<li class="item">\n                                <div class="item-week">\n                                </div>\n                                <div class="scale-wrapper">\n                                    <ul class="list-scale-wrap">\n                                        <li class="times-wrap-left">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Mon</div>\n                                            <div class="add-times-left">\n                                                <div class="default-wrap">\n                                                    <div class="monday default-slider slide-active"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Tue</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  tuesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Wed</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider wednesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Th</div>\n                                            <div></div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider thursday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Fr</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  friday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sat</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  saturday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sun</div>\n                                            <div class="add-times-right">\n                                                <div class="default-wrap">\n                                                    <div class="default-slider  sunday"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="times-wrap-right">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </li>');i.addSlide(s)}function f(){h?($(".switch-on").removeClass("active"),$(".switch-off").addClass("active"),$(".default-wrap").addClass("slide-wrap"),$(".default-slider").addClass("slider"),$(".slider").removeClass("default-slider"),$(".slider").slider({min:0,max:23}),h=!1):0==h&&($(".switch-off").removeClass("active"),$(".switch-on").addClass("active"),$(".slide-wrap").addClass("default-wrap"),$(".default-wrap").removeClass("slide-wrap"),$(".slider").addClass("default-slider"),$(".default-slider").removeClass("slider"),h=!0,$(".default-slider.active-slider").each(function(e,i){var s=$(i).slider("values");$(i).slider("destroy"),t($(i),s)}))}function v(e){var i=$(e),s=[];if(s=h?[4,5,6,7,8,9,10,11,12,13,14]:[].concat(l(new Array(24).keys())),i.hasClass("active-slider")){var n=i.slider("values"),a=n[n.length-1]-1;if(n.indexOf(a)===-1&&s.indexOf(a)!==-1)n.push(n[n.length-1]-1);else{s=s.filter(function(e){return n.indexOf(e)==-1});var d=s.randomElement();void 0!=d&&n.push(d)}i.slider("destroy"),t(i,n)}else t(i),i.addClass("active-slider");i.find(".ui-slider-handle:last").focus()}function m(e){console.log(e);var i=e.parent(),s=i.find(".ui-slider-handle").index(e),l=i.slider("values");console.log("old values",l),console.log(s),l.splice(s,1),console.log("new values",l),i.slider("destroy"),t(i,l)}Object.defineProperty(s,"__esModule",{value:!0}),s.initSlider=t,s.getItems=c,s.addLastWeekSlide=u,s.daytimeSliderChanges=f,s.addHandle=v,s.deleteHandle=m,Array.prototype.randomElement=function(){return this[Math.floor(Math.random()*this.length)]};var p;$(window).ready(function(){$("body").append('<div id="slider-popup"></div>'),p=$("#slider-popup")});var h=!0},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
