!function e(i,a,l){function s(t,d){if(!a[t]){if(!i[t]){var r="function"==typeof require&&require;if(!d&&r)return r(t,!0);if(n)return n(t,!0);var o=new Error("Cannot find module '"+t+"'");throw o.code="MODULE_NOT_FOUND",o}var c=a[t]={exports:{}};i[t][0].call(c.exports,function(e){var a=i[t][1][e];return s(a?a:e)},c,c.exports,e,i,a,l)}return a[t].exports}for(var n="function"==typeof require&&require,t=0;t<l.length;t++)s(l[t]);return s}({1:[function(e,i,a){"use strict";var l=e("./weeks");$(window).ready(function(){$("#handle-size-select").on("change",function(){(0,l.setHandleSize)(this.value)}),$("#calculate-all").on("click",function(){(0,l.calculateAllHandles)()});var e=!1,i=void 0;$(".on-btn").click(function(){if("none"==(i=document.getElementById("box").style.display)){if(document.getElementById("box").style.display="block",!e){e=!0,$(".flexslider").flexslider({animation:"slide",slideshow:!1,controlNav:!1,controlsContainer:$(".custom-controls-container"),customDirectionNav:$(".custom-navigation a"),keyboard:!1,animationLoop:!0,after:function(e){e.currentSlide==e.last&&(0,l.addLastWeekSlide)($(".flexslider")),(0,l.setWeekText)(e.currentSlide),0==e.currentSlide?($(".flex-prev").hide(),$(".flex-prev-block").show()):($(".flex-prev").show(),$(".flex-prev-block").hide())}});var a=moment().isoWeekday(),s=void 0;switch(a){case 1:s=".monday";break;case 2:s=".tuesday";break;case 3:s=".wednesday";break;case 4:s=".thursday";break;case 5:s=".friday";break;case 6:s=".saturday";break;case 7:s=".sunday"}var n=$(".flex-active-slide").find(s),t=$(".flex-active-slide .default-wrap > div"),d=t.splice(0,t.index(n));d.forEach(function(e){$(e).addClass("past-day")}),(0,l.initFirstSlider)(n)}}else"block"==i&&(document.getElementById("box").style.display="none")}),$(".close-button").click(function(){document.getElementById("box").style.display="none"}),$(".switch-on").click(l.daytimeSliderChanges),$(".switch-off").click(l.daytimeSliderChanges),$(".flex-prev").hide(),$(".flex-prev-block").show(),$(".add-button").click(function(){var e=$(".flex-active-slide .default-wrap > div:not(.past-day)"),i=e[0];(0,l.addHandle)(i)});var a=null;$(".del-button").mousedown(function(){a=$(":focus").hasClass("ui-slider-handle")?$(":focus"):null}),$(".del-button").click(function(){a&&(0,l.deleteHandle)(a)})})},{"./weeks":2}],2:[function(e,i,a){"use strict";function l(e){if(Array.isArray(e)){for(var i=0,a=Array(e.length);i<e.length;i++)a[i]=e[i];return a}return Array.from(e)}function s(e){var i=e.getBoundingClientRect();return{top:i.top+window.scrollY,bottom:i.bottom+window.scrollY,left:i.left+window.scrollX,right:i.right+window.scrollX}}function n(e){console.log(e),A=e,t()}function t(){var e;100==A?e="8px":200==A?e="16px":300==A?e="24px":400==A?e="32px":(console.log("incorrect HANDLE_SIZE value!"),e="8px"),$(".ui-slider-handle").css("height",e)}function d(e,i){return i&&(e=e.filter(function(e){return e<=14&&e>=4})),e}function r(e){var i=23-(moment().hour()+1);return i<0&&(i=0),e&&(i<4?i=4:i>14&&(i=14)),i}function o(e,i){var a;a=e.hasClass("current-day")?r(H):H?14:23,i=i?d(i,H):[a],e.slider({orientation:"vertical",min:H?4:0,max:H?14:23,values:i,step:1,animate:!0,start:function(e,i){var a=23-i.value;C.text(a),C.show(),C.css("top",s(i.handle).top-10),C.css("left",s(i.handle).left+30)},slide:function(e,i){if($(this).hasClass("current-day")&&!v(i))return!1;var a=s(this);if(!(e.pageX<a.right+10&&e.pageX>a.left-10&&e.pageY<a.bottom+10&&e.pageY>a.top-10))return!1;for(var l=[],n=0;n<i.values.length;n++){if(l.indexOf(i.values[n])>-1)return!1;l.push(i.values[n])}var t=23-i.value;C.text(t),C.css("top",s(i.handle).top-10),C.css("left",s(i.handle).left+30)},stop:function(){C.hide()}}),0==i.length?e.removeClass("active-slider"):e.addClass("active-slider"),p(),t()}function c(e){if(e.addClass("current-day"),r(H)>=23-S){var i=u(e,!0);o($(i))}else o(e)}function u(e,i){var a,l=$(".flex-active-slide .default-wrap > div"),s=l.index(e);if(6!=s)a=l[s+1];else{var n=$(".flex-active-slide")[0],t=n.nextElementSibling;a=$(t).find(".monday"),i&&f()}return a}function f(){$(".flex-next").trigger("click")}function v(e){return e.value<23-S}function p(){$(".ui-slider-handle").off("mousedown"),$(".ui-slider-handle").on("mousedown",function(e){function i(){$(".flex-active-slide .scale-item .default-wrap").off("mouseup")}function a(e){$(l).focus();var i=s(n);e.pageX<i.right+10&&e.pageX>i.left-10&&e.pageY<i.bottom+10&&e.pageY>i.top-10?r.css("display","none"):(r.css("display","initial"),r.css("left",e.pageX-r.width()/2),r.css("top",e.pageY-r.height()/2))}var l=this;$(l).focus();var n=$(this).parent()[0],t=$(n).find(".ui-slider-handle").index(l),d=$(".flex-active-slide .scale-item .default-wrap > div").index($(n)),r=$(this).clone().addClass("handle-clone");r.css("width",$(l).width()).css("height",$(l).height()),a(e),$("body").append(r),function(){$(".flex-active-slide .scale-item .default-wrap").each(function(e,i){e!==d&&$(i).mouseup(function(e){var i=$(e.currentTarget).find("div");m(e,n,i,t)})})}(),$("body").mousemove(function(e){a(e)}),$("body").mouseup(function(e){$("body").off("mousemove"),$("body").off("mouseup"),r.remove(),i()})})}function m(e,i,a,l){if(!a.hasClass("past-day")){if(a.hasClass("current-day")){if(r(H)>=23-S)return}var s=$(i).slider("values");s.splice(l,1);x(a,!0)&&($(i).slider("destroy"),o($(i),s)),C.hide()}}function h(){return $(".flexslider .slides .item:not(.clone)")}function y(e){var i=e.data("flexslider"),a=$('<li class="item">\n                                <div class="item-week">\n                                </div>\n                                <div class="scale-wrapper">\n                                    <ul class="list-scale-wrap">\n                                        <li class="times-wrap-left">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Mon</div>\n                                            <div class="add-times-left">\n                                                <div class="default-wrap">\n                                                    <div class="default-slider monday"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Tue</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  tuesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Wed</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider wednesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Th</div>\n                                            <div></div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider thursday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Fr</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  friday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sat</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  saturday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sun</div>\n                                            <div class="add-times-right">\n                                                <div class="default-wrap">\n                                                    <div class="default-slider  sunday"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="times-wrap-right">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </li>');i.addSlide(a)}function w(){H?($(".switch-on").removeClass("active"),$(".switch-off").addClass("active"),$(".default-wrap").addClass("slide-wrap"),$(".default-slider").addClass("slider"),$(".slider").removeClass("default-slider"),$(".slider").slider({min:0,max:23}),H=!1):0==H&&($(".switch-off").removeClass("active"),$(".switch-on").addClass("active"),$(".slide-wrap").addClass("default-wrap"),$(".default-wrap").removeClass("slide-wrap"),$(".slider").addClass("default-slider"),$(".default-slider").removeClass("slider"),H=!0,$(".default-slider.active-slider").each(function(e,i){var a=$(i).slider("values");$(i).slider("destroy"),o($(i),a)}))}function x(e,i){var a=$(e),s=[];if(s=H?[4,5,6,7,8,9,10,11,12,13,14]:[].concat(l(new Array(24).keys())),!a.hasClass("active-slider")){var n=r(H);if(a.hasClass("current-day")&&n>=23-S){var t=u(e,!1);if($(".flex-active-slide .default-wrap > div").index(t)==-1)return;x(t),$(t).addClass("active-slider")}else o(a),a.addClass("active-slider");return!0}var d=a.slider("values");a.hasClass("current-day")&&(s=s.filter(function(e){return!(e>=23-S)})),s=s.filter(function(e){return d.indexOf(e)==-1});var c=s[s.length-1];if(void 0!=c)return d.push(c),a.slider("destroy"),o(a,d),a.find(".ui-slider-handle:last").focus(),!0;if(i)return!1;var f=u(e,!1);if($(".flex-active-slide .default-wrap > div").index(f)==-1)return!1;x(f)}function g(e){var i=e.parent(),a=i.find(".ui-slider-handle").index(e),l=i.slider("values");l.splice(a,1),i.slider("destroy"),o(i,l)}function k(e){var i=E.clone(),a=e?i.add(e,"w"):i,l=a.isoWeekday(1).format("DD"),s=a.isoWeekday(7).format("DD"),n=a.format("MM");$(".item-week").html("Week "+l+"-"+s+"."+n)}function b(){var e=[];console.log("calculating moments..."),$(".flexslider .slides .item:not(.clone)").each(function(i,a){var l=E.week()+i;$(a).find(".default-wrap > div").each(function(i,a){var s=1+i;$(a).hasClass("active-slider")&&$(a).slider("values").map(function(e){return 23-e}).forEach(function(i){e.push(moment().year(E.year()).month(E.month()).week(l).day(s).hour(i).minute(0).second(0))})})}),e=e.filter(function(e){var i=E.clone().hour(S+1).minute(0).second(0);return e.unix()>=i.unix()});var i=e.map(function(e){return e.format("LLL")});console.log(i),console.log("object returned -> ",e)}Object.defineProperty(a,"__esModule",{value:!0}),a.setHandleSize=n,a.updateAllHandles=t,a.initSlider=o,a.initFirstSlider=c,a.getItems=h,a.addLastWeekSlide=y,a.daytimeSliderChanges=w,a.addHandle=x,a.deleteHandle=g,a.setWeekText=k,a.calculateAllHandles=b;var C,S,E;$(window).ready(function(){$("body").append('<div id="slider-popup"></div>'),C=$("#slider-popup"),S=moment().hour(),E=moment(),k()});var H=!0,A=100},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
