!function e(a,i,s){function l(n,d){if(!i[n]){if(!a[n]){var r="function"==typeof require&&require;if(!d&&r)return r(n,!0);if(t)return t(n,!0);var c=new Error("Cannot find module '"+n+"'");throw c.code="MODULE_NOT_FOUND",c}var o=i[n]={exports:{}};a[n][0].call(o.exports,function(e){var i=a[n][1][e];return l(i?i:e)},o,o.exports,e,a,i,s)}return i[n].exports}for(var t="function"==typeof require&&require,n=0;n<s.length;n++)l(s[n]);return l}({1:[function(e,a,i){"use strict";var s=e("./weeks");$(window).ready(function(){$("#handle-size-select").on("change",function(){(0,s.setHandleSize)(this.value)}),$("#calculate-all").on("click",function(){(0,s.calculateAllHandles)()});var e=!1,a=void 0;$(".on-btn").click(function(){if("none"==(a=document.getElementById("box").style.display)){if(document.getElementById("box").style.display="block",!e){e=!0,$(".flexslider").flexslider({animation:"slide",slideshow:!1,controlNav:!1,controlsContainer:$(".custom-controls-container"),customDirectionNav:$(".custom-navigation a"),keyboard:!1,animationLoop:!0,after:function(e){e.currentSlide==e.last&&(0,s.addLastWeekSlide)($(".flexslider")),(0,s.setWeekText)(e.currentSlide),0==e.currentSlide?($(".flex-prev").hide(),$(".flex-prev-block").show()):($(".flex-prev").show(),$(".flex-prev-block").hide())}});var i=moment().isoWeekday(),l=void 0;switch(i){case 1:l=".monday";break;case 2:l=".tuesday";break;case 3:l=".wednesday";break;case 4:l=".thursday";break;case 5:l=".friday";break;case 6:l=".saturday";break;case 7:l=".sunday"}var t=$(".flex-active-slide").find(l),n=$(".flex-active-slide .default-wrap > div"),d=n.splice(0,n.index(t));d.forEach(function(e){$(e).addClass("past-day")}),(0,s.initFirstSlider)(t),(0,s.setHandleSize)(100)}}else"block"==a&&(document.getElementById("box").style.display="none")}),$(".close-button").click(function(){document.getElementById("box").style.display="none"}),$(".switch-on").click(function(){(0,s.daytimeSliderChanges)(),(0,s.updateSliderCSS)()}),$(".switch-off").click(function(){(0,s.daytimeSliderChanges)(),(0,s.updateSliderCSS)()}),$(".flex-prev").hide(),$(".flex-prev-block").show(),$(".add-button").click(function(){var e=$(".flex-active-slide .default-wrap > div:not(.past-day)"),a=e[0];(0,s.addHandle)(a)});var i=null;$(".del-button").mousedown(function(){i=$(":focus").hasClass("ui-slider-handle")?$(":focus"):null}),$(".del-button").click(function(){i&&(0,s.deleteHandle)(i)})})},{"./weeks":2}],2:[function(e,a,i){"use strict";function s(e){if(Array.isArray(e)){for(var a=0,i=Array(e.length);a<e.length;a++)i[a]=e[a];return i}return Array.from(e)}function l(e){var a=e.getBoundingClientRect();return{top:a.top+window.scrollY,bottom:a.bottom+window.scrollY,left:a.left+window.scrollX,right:a.right+window.scrollX}}function t(e){W=parseInt(e),n(),d()}function n(){var e;switch(W){case 100:e=8;break;case 200:e=16;break;case 300:e=24;break;case 400:e=32;break;default:console.log("incorrect HANDLE_SIZE! Defaulting to 100"),e=8}$(".ui-slider-handle").css("height",e)}function d(){if(D){var e;switch(W){case 100:e=0;break;case 200:e=7;break;case 300:e=14;break;case 400:e=20}$(".default-wrap").css("height",190+e),$(".default-wrap").css("padding-top",70+e)}else{var e;switch(W){case 100:e=0;break;case 200:e=7;break;case 300:e=14;break;case 400:e=20}$(".default-wrap").css("height",190+e),$(".default-wrap").css("padding-top",e)}}function r(e,a){return a&&(e=e.filter(function(e){return e<=14&&e>=4})),e}function c(e){var a=23-(moment().hour()+1);return a<0&&(a=0),e&&(a<4?a=4:a>14&&(a=14)),a}function o(e,a){var i;i=e.hasClass("current-day")?c(D):D?14:23,a=a?r(a,D):[i],e.slider({orientation:"vertical",min:D?4:0,max:D?14:23,values:a,step:1,animate:!0,start:function(e,a){var i=23-a.value;E.text(i),E.show(),E.css("top",l(a.handle).top-10),E.css("left",l(a.handle).left+30)},slide:function(e,a){if($(this).hasClass("current-day")&&!h(a))return!1;var i=l(this);if(!(e.pageX<i.right+10&&e.pageX>i.left-10&&e.pageY<i.bottom+10&&e.pageY>i.top-10))return!1;for(var s=[],t=0;t<a.values.length;t++){if(s.indexOf(a.values[t])>-1)return!1;s.push(a.values[t])}if(!u(a))return!1;var n=23-a.value;E.text(n),E.css("top",l(a.handle).top-10),E.css("left",l(a.handle).left+30)},stop:function(){E.hide()}}),0==a.length?e.removeClass("active-slider"):e.addClass("active-slider"),m(),n()}function u(e){if(1==e.values.length)return!0;var a;switch(W){case 100:return!0;case 200:a=2;break;case 300:a=3;break;case 400:a=4}for(var i=0;i<e.values.length;i++){var s=e.values[i],l=e.values.slice();l.splice(i,1);for(var t=0;t<l.length;t++){var n=l[t];if(Math.abs(23-n-(23-s))<a)return!1}}return!0}function f(e){if(e.addClass("current-day"),c(D)>=23-H){var a=v(e,!0);o($(a))}else o(e)}function v(e,a){var i,s=$(".flex-active-slide .default-wrap > div"),l=s.index(e);if(6!=l)i=s[l+1];else{var t=$(".flex-active-slide")[0],n=t.nextElementSibling;i=$(n).find(".monday"),a&&p()}return i}function p(){$(".flex-next").trigger("click")}function h(e){return e.value<23-H}function m(){$(".ui-slider-handle").off("mousedown"),$(".ui-slider-handle").on("mousedown",function(e){function a(){$(".flex-active-slide .scale-item .default-wrap").off("mouseup")}function i(e){$(s).focus();var a=l(t);e.pageX<a.right+10&&e.pageX>a.left-10&&e.pageY<a.bottom+10&&e.pageY>a.top-10?r.css("display","none"):(r.css("display","initial"),r.css("left",e.pageX-r.width()/2),r.css("top",e.pageY-r.height()/2))}var s=this;$(s).focus();var t=$(this).parent()[0],n=$(t).find(".ui-slider-handle").index(s),d=$(".flex-active-slide .scale-item .default-wrap > div").index($(t)),r=$(this).clone().addClass("handle-clone");r.css("width",$(s).width()).css("height",$(s).height()),r.css("border-radius","10%"),i(e),$("body").append(r),function(){$(".flex-active-slide .scale-item .default-wrap").each(function(e,a){e!==d&&$(a).mouseup(function(e){var a=$(e.currentTarget).find("div");w(e,t,a,n)})})}(),$("body").mousemove(function(e){i(e)}),$("body").mouseup(function(e){$("body").off("mousemove"),$("body").off("mouseup"),r.remove(),a()})})}function w(e,a,i,s){if(!i.hasClass("past-day")){if(i.hasClass("current-day")){if(c(D)>=23-H)return}var l=$(a).slider("values");l.splice(s,1);b(i,!0)&&($(a).slider("destroy"),o($(a),l)),E.hide()}}function y(){return $(".flexslider .slides .item:not(.clone)")}function g(e){var a=e.data("flexslider"),i=$('<li class="item">\n                                <div class="item-week">\n                                </div>\n                                <div class="scale-wrapper">\n                                    <ul class="list-scale-wrap">\n                                        <li class="times-wrap-left">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Mon</div>\n                                            <div class="add-times-left">\n                                                <div class="default-wrap">\n                                                    <div class="default-slider monday"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Tue</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  tuesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Wed</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider wednesday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Th</div>\n                                            <div></div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider thursday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Fr</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  friday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sat</div>\n                                            <div class="default-wrap">\n                                                <div class="default-slider  saturday"></div>\n                                            </div>\n                                        </li>\n                                        <li class="scale-item">\n                                            <div class="day">Sun</div>\n                                            <div class="add-times-right">\n                                                <div class="default-wrap">\n                                                    <div class="default-slider  sunday"></div>\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li class="times-wrap-right">\n                                            <div class="time-min">00</div>\n                                            <div class="time-max">24</div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </li>');a.addSlide(i),d()}function x(){D?($(".switch-on").removeClass("active"),$(".switch-off").addClass("active"),$(".default-wrap").addClass("slide-wrap"),$(".default-slider").addClass("slider"),$(".slider").removeClass("default-slider"),$(".slider").slider({min:0,max:23}),D=!1):0==D&&($(".switch-off").removeClass("active"),$(".switch-on").addClass("active"),$(".slide-wrap").addClass("default-wrap"),$(".default-wrap").removeClass("slide-wrap"),$(".slider").addClass("default-slider"),$(".default-slider").removeClass("slider"),D=!0,$(".default-slider.active-slider").each(function(e,a){var i=$(a).slider("values");$(a).slider("destroy"),o($(a),i)})),d()}function b(e,a){var i=$(e),l=[];if(l=D?[4,5,6,7,8,9,10,11,12,13,14]:[].concat(s(new Array(24).keys())),!i.hasClass("active-slider")){var t=c(D);if(i.hasClass("current-day")&&t>=23-H){var n=v(e,!1);if($(".flex-active-slide .default-wrap > div").index(n)==-1)return;b(n),$(n).addClass("active-slider")}else o(i),i.addClass("active-slider");return!0}var d=i.slider("values");i.hasClass("current-day")&&(l=l.filter(function(e){return!(e>=23-H)})),l=l.filter(function(e){return d.indexOf(e)==-1});for(var r=void 0,f=0;f<l.length;f++){var p=l[f],h=d.slice();h.push(p);u({values:h})&&(r=p)}if(void 0!=r)return d.push(r),i.slider("destroy"),o(i,d),i.find(".ui-slider-handle:last").focus(),!0;if(a)return!1;var m=v(e,!1);if($(".flex-active-slide .default-wrap > div").index(m)==-1)return!1;b(m)}function k(e){var a=e.parent(),i=a.find(".ui-slider-handle").index(e),s=a.slider("values");s.splice(i,1),a.slider("destroy"),o(a,s)}function C(e){var a=A.clone(),i=e?a.add(e,"w"):a,s=i.isoWeekday(1).format("DD"),l=i.isoWeekday(7).format("DD"),t=i.format("MM");$(".item-week").html("Week "+s+"-"+l+"."+t)}function S(){var e=[];console.log("calculating moments..."),$(".flexslider .slides .item:not(.clone)").each(function(a,i){var s=A.week()+a;$(i).find(".default-wrap > div").each(function(a,i){var l=1+a;$(i).hasClass("active-slider")&&$(i).slider("values").map(function(e){return 23-e}).forEach(function(a){e.push(moment().year(A.year()).month(A.month()).week(s).day(l).hour(a).minute(0).second(0))})})}),e=e.filter(function(e){var a=A.clone().hour(H+1).minute(0).second(0);return e.unix()>=a.unix()});var a=e.map(function(e){return e.format("LLL")});console.log(a),console.log("object returned -> ",e)}Object.defineProperty(i,"__esModule",{value:!0}),i.setHandleSize=t,i.updateAllHandles=n,i.updateSliderCSS=d,i.initSlider=o,i.initFirstSlider=f,i.getItems=y,i.addLastWeekSlide=g,i.daytimeSliderChanges=x,i.addHandle=b,i.deleteHandle=k,i.setWeekText=C,i.calculateAllHandles=S;var E,H,A;$(window).ready(function(){$("body").append('<div id="slider-popup"></div>'),E=$("#slider-popup"),H=moment().hour(),A=moment(),C()});var D=!0,W=100},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
